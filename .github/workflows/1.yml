name: RDP2

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      - name: Download Files from Private Repository
        run: |
          $token = "${{ secrets.GH_PAT }}"
          $headers = @{
              Authorization = "Bearer $token"
              Accept = "application/vnd.github.v3.raw"
          }
          
          $repo = "brainburn33/repo"
          $branch = "main"
          
          Write-Host "Downloading Roblox.zip..."
          $robloxUrl = "https://raw.githubusercontent.com/$repo/$branch/Roblox.zip"
          Invoke-WebRequest -Uri $robloxUrl -Headers $headers -OutFile "Roblox.zip"
          
          Write-Host "Downloading AutoHotkey installer..."
          $ahkUrl = "https://raw.githubusercontent.com/$repo/$branch/AutoHotkey_1.1.37.02_setup.exe"
          Invoke-WebRequest -Uri $ahkUrl -Headers $headers -OutFile "AutoHotkey_1.1.37.02_setup.exe"
          
          Write-Host "Downloading AutoHotkey script..."
          $ahkScriptUrl = "https://raw.githubusercontent.com/$repo/$branch/connect.ahk"
          Invoke-WebRequest -Uri $ahkScriptUrl -Headers $headers -OutFile "connect.ahk"
          
          Write-Host "Downloading Python script..."
          $pyUrl = "https://raw.githubusercontent.com/$repo/$branch/kickedcheckv2.py"
          Invoke-WebRequest -Uri $pyUrl -Headers $headers -OutFile "kickedcheckv2.py"
          
          # Проверка загруженных файлов
          $files = @("Roblox.zip", "AutoHotkey_1.1.37.02_setup.exe", "connect.ahk", "kickedcheckv2.py")
          foreach ($file in $files) {
              if (Test-Path $file) {
                  $size = (Get-Item $file).Length / 1MB
                  Write-Host "✓ $file - $([math]::Round($size, 2)) MB"
              } else {
                  Write-Error "✗ $file - FAILED TO DOWNLOAD"
                  exit 1
              }
          }

      - name: Configure core RDP settings
        run: |
          Write-Host "Configuring RDP settings..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "RDP configured successfully!"

      - name: create RDP user with Secure Password
        run: |
          Write-Host "Creating RDP user..."
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction Stop
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
          Write-Host "RDP user created successfully!"

      - name: Install Python
        run: |
          Write-Host "Installing Python 3.11..."
          $pythonUrl = "https://www.python.org/ftp/python/3.11.0/python-3.11.0-amd64.exe"
          $pythonInstaller = "$env:TEMP\python-installer.exe"
          
          Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller
          Start-Process $pythonInstaller -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "Include_test=0" -Wait
          Remove-Item $pythonInstaller -Force
          
          # Обновление PATH
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          Write-Host "Python installed successfully!"

      - name: Install Python Libraries
        run: |
          Write-Host "Installing Python libraries..."
          Start-Sleep -Seconds 5
          
          # Обновляем PATH для текущей сессии
          $env:Path = "C:\Program Files\Python311;C:\Program Files\Python311\Scripts;" + $env:Path
          
          python -m pip install --upgrade pip
          pip install numpy opencv-python pygetwindow pywin32
          
          # Проверка установленных библиотек
          Write-Host "`nVerifying installed packages:"
          pip list | Select-String "numpy|opencv|pygetwindow|pywin32"
          
          Write-Host "Python libraries installed successfully!"

      - name: Install AutoHotkey
        run: |
          Write-Host "Installing AutoHotkey..."
          
          if (Test-Path "AutoHotkey_1.1.37.02_setup.exe") {
              Start-Process "AutoHotkey_1.1.37.02_setup.exe" -ArgumentList "/S" -Wait
              Remove-Item "AutoHotkey_1.1.37.02_setup.exe" -Force
              
              # Проверка установки
              if (Test-Path "C:\Program Files\AutoHotkey\AutoHotkey.exe") {
                  Write-Host "✓ AutoHotkey installed successfully!"
              } else {
                  Write-Error "AutoHotkey installation failed"
                  exit 1
              }
          } else {
              Write-Error "AutoHotkey installer not found"
              exit 1
          }

      - name: Download Roblox Player from GitHub Release
        run: |
          Write-Host "Downloading Roblox Player from GitHub Release..."
          
          $token = "${{ secrets.GH_PAT }}"
          $repo = "brainburn33/repo"
          $releaseTag = "v1.0.0"
          
          # Получаем информацию о релизе
          $releaseUrl = "https://api.github.com/repos/$repo/releases/tags/$releaseTag"
          $headers = @{
              Authorization = "Bearer $token"
              Accept = "application/vnd.github.v3+json"
          }
          
          Write-Host "Fetching release info..."
          $release = Invoke-RestMethod -Uri $releaseUrl -Headers $headers
          
          # Находим нужный asset
          $asset = $release.assets | Where-Object { $_.name -eq "RobloxPlayer.zip" }
          
          if ($asset) {
              Write-Host "Found asset: $($asset.name) ($([math]::Round($asset.size / 1MB, 2)) MB)"
              
              # Скачиваем asset
              $downloadHeaders = @{
                  Authorization = "Bearer $token"
                  Accept = "application/octet-stream"
              }
              
              $assetUrl = $asset.url
              $robloxZipPath = "$env:TEMP\RobloxPlayer.zip"
              
              Write-Host "Downloading..."
              Invoke-WebRequest -Uri $assetUrl -Headers $downloadHeaders -OutFile $robloxZipPath
              
              if (Test-Path $robloxZipPath) {
                  $zipSize = (Get-Item $robloxZipPath).Length / 1MB
                  Write-Host "✓ Downloaded: $([math]::Round($zipSize, 2)) MB"
                  
                  # Распаковка
                  $robloxInstallPath = "$env:LOCALAPPDATA\Roblox\Versions"
                  if (-not (Test-Path $robloxInstallPath)) {
                      New-Item -ItemType Directory -Path $robloxInstallPath -Force | Out-Null
                  }
                  
                  Write-Host "Extracting Roblox Player..."
                  Expand-Archive -Path $robloxZipPath -DestinationPath $robloxInstallPath -Force
                  Remove-Item $robloxZipPath -Force
                  
                  # Поиск exe
                  $playerExe = Get-ChildItem -Path $robloxInstallPath -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
                  
                  if ($playerExe) {
                      Write-Host "✓ Roblox Player installed at: $($playerExe.FullName)"
                      
                      # Ярлык
                      $desktopPath = [Environment]::GetFolderPath("Desktop")
                      $shortcutPath = "$desktopPath\Roblox Player.lnk"
                      $WScriptShell = New-Object -ComObject WScript.Shell
                      $shortcut = $WScriptShell.CreateShortcut($shortcutPath)
                      $shortcut.TargetPath = $playerExe.FullName
                      $shortcut.Save()
                      Write-Host "✓ Shortcut created"
                  } else {
                      Write-Host "⚠ RobloxPlayerBeta.exe not found"
                  }
              }
          } else {
              Write-Error "RobloxPlayer.zip not found in release assets"
              exit 1
          }
      - name: Setup Roblox Data
        run: |
          Write-Host "Setting up Roblox data..."
          $robloxPath = "$env:LOCALAPPDATA\Roblox"
          
          if (-not (Test-Path $robloxPath)) {
              New-Item -ItemType Directory -Path $robloxPath -Force | Out-Null
          }
          
          Write-Host "Extracting Roblox.zip to $robloxPath..."
          Expand-Archive -Path "Roblox.zip" -DestinationPath $robloxPath -Force
          
          Remove-Item "Roblox.zip" -Force
          
          Write-Host "✓ Roblox data extracted successfully!"
          
          # Показываем что было распаковано
          if (Test-Path "$robloxPath\*") {
              Write-Host "Extracted files:"
              Get-ChildItem $robloxPath -Recurse | Select-Object -First 10 | ForEach-Object {
                  Write-Host "  - $($_.FullName)"
              }
          }

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          
          Write-Host "Tailscale installed successfully!"

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Connecting to Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected! IP: $tsIP"
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Verifying RDP accessibility..."
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "✓ TCP connectivity successful!"

      - name: Start Python Script
        run: |
          if (Test-Path "kickedcheckv2.py") {
              Write-Host "Starting Python script in background..."
              
              # Обновляем PATH
              $env:Path = "C:\Program Files\Python311;C:\Program Files\Python311\Scripts;" + $env:Path
              
              # Запускаем Python скрипт в фоновом режиме
              Start-Process python -ArgumentList "kickedcheckv2.py" -WindowStyle Hidden
              
              Write-Host "Python script started successfully!"
              Start-Sleep -Seconds 3
          } else {
              Write-Host "Python script not found, skipping..."
          }

      - name: Start AutoHotkey Script
        run: |
          if (Test-Path "connect.ahk") {
              Write-Host "Starting AutoHotkey script..."
              Start-Process "C:\Program Files\AutoHotkey\AutoHotkey.exe" -ArgumentList "connect.ahk"
              Write-Host "AutoHotkey script started!"
          } else {
              Write-Host "AutoHotkey script not found, skipping..."
          }

      - name: Maintain Connection
        run: |
          Write-Host "`n================================================"
          Write-Host "           RDP ACCESS INFORMATION"
          Write-Host "================================================"
          Write-Host "Address:  $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "================================================"
          Write-Host "Roblox:   Installed (Latest version)"
          Write-Host "Python:   kickedcheckv2.py (running)"
          Write-Host "AHK:      connect.ahk (running)"
          Write-Host "================================================`n"
          
          Write-Host "Session will remain active until manually cancelled."
          Write-Host "Press 'Cancel workflow' in GitHub Actions to terminate.`n"
          
          while ($true) {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP session active..."
              
              # Проверка Python процесса
              $pythonProcess = Get-Process python -ErrorAction SilentlyContinue
              if ($pythonProcess) {
                  Write-Host "  ✓ Python script running (PID: $($pythonProcess.Id))"
              } else {
                  Write-Host "  ⚠ Python script not detected"
              }
              
              # Проверка AHK процесса
              $ahkProcess = Get-Process AutoHotkey -ErrorAction SilentlyContinue
              if ($ahkProcess) {
                  Write-Host "  ✓ AHK script running (PID: $($ahkProcess.Id))"
              } else {
                  Write-Host "  ⚠ AHK script not detected"
              }
              
              # Проверка Roblox процесса
              $robloxProcess = Get-Process RobloxPlayerBeta -ErrorAction SilentlyContinue
              if ($robloxProcess) {
                  Write-Host "  ✓ Roblox Player running (PID: $($robloxProcess.Id))"
              }
              
              Start-Sleep -Seconds 300
          }
