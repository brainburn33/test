name: RDP2

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      - name: Configure core RDP settings
        run: |
          Write-Host "Configuring RDP settings..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "RDP configured successfully!"

      - name: Create RDP User with Secure Password
        run: |
          Write-Host "Creating RDP user..."
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction Stop
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          Set-Content -Path "$env:TEMP\rdp_password.txt" -Value $password
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
          
          # Создаём профиль пользователя RDP
          Write-Host "Creating RDP user profile..."
          $rdpUserPath = "C:\Users\RDP"
          if (-not (Test-Path $rdpUserPath)) {
              # Создаём базовые папки профиля
              New-Item -ItemType Directory -Path "$rdpUserPath\Desktop" -Force | Out-Null
              New-Item -ItemType Directory -Path "$rdpUserPath\Downloads" -Force | Out-Null
              New-Item -ItemType Directory -Path "$rdpUserPath\AppData\Local" -Force | Out-Null
              New-Item -ItemType Directory -Path "$rdpUserPath\AppData\Roaming" -Force | Out-Null
              
              # Устанавливаем права владельца
              $acl = Get-Acl $rdpUserPath
              $userSID = (Get-LocalUser -Name "RDP").SID
              $owner = New-Object System.Security.Principal.SecurityIdentifier($userSID)
              $acl.SetOwner($owner)
              
              $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
              $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
              $acl.SetAccessRule($accessRule)
              Set-Acl $rdpUserPath $acl
          }
          
          Write-Host "✓ RDP user created successfully!"

      - name: Download Files from Private Repository
        run: |
          $token = "${{ secrets.GH_PAT }}"
          $headers = @{
              Authorization = "Bearer $token"
              Accept = "application/vnd.github.v3.raw"
          }
          
          $repo = "brainburn33/repo"
          $branch = "main"
          $downloadPath = "C:\Users\RDP\Downloads"
          
          Write-Host "Downloading files to: $downloadPath"
          
          Write-Host "Downloading Roblox.zip..."
          $robloxUrl = "https://raw.githubusercontent.com/$repo/$branch/Roblox.zip"
          Invoke-WebRequest -Uri $robloxUrl -Headers $headers -OutFile "$downloadPath\Roblox.zip"
          
          Write-Host "Downloading AutoHotkey installer..."
          $ahkUrl = "https://raw.githubusercontent.com/$repo/$branch/AutoHotkey_1.1.37.02_setup.exe"
          Invoke-WebRequest -Uri $ahkUrl -Headers $headers -OutFile "$downloadPath\AutoHotkey_1.1.37.02_setup.exe"
          
          Write-Host "Downloading AutoHotkey script..."
          $ahkScriptUrl = "https://raw.githubusercontent.com/$repo/$branch/connect.ahk"
          Invoke-WebRequest -Uri $ahkScriptUrl -Headers $headers -OutFile "$downloadPath\connect.ahk"
          
          Write-Host "Downloading Python script..."
          $pyUrl = "https://raw.githubusercontent.com/$repo/$branch/kickedcheckv2.py"
          Invoke-WebRequest -Uri $pyUrl -Headers $headers -OutFile "$downloadPath\kickedcheckv2.py"
          
          # Проверка загруженных файлов
          $files = @("Roblox.zip", "AutoHotkey_1.1.37.02_setup.exe", "connect.ahk", "kickedcheckv2.py")
          foreach ($file in $files) {
              $filePath = "$downloadPath\$file"
              if (Test-Path $filePath) {
                  $size = (Get-Item $filePath).Length / 1MB
                  Write-Host "✓ $file - $([math]::Round($size, 2)) MB"
              } else {
                  Write-Error "✗ $file - FAILED TO DOWNLOAD"
                  exit 1
              }
          }
          
          # Устанавливаем права для пользователя RDP
          Get-ChildItem $downloadPath -Recurse | ForEach-Object {
              $acl = Get-Acl $_.FullName
              $permission = "RDP","FullControl","None","None","Allow"
              $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
              $acl.SetAccessRule($accessRule)
              Set-Acl $_.FullName $acl
          }
          
          Write-Host "✓ All files downloaded and permissions set for RDP user"

      - name: Install Python for RDP User
        run: |
          Write-Host "Installing Python 3.11 for RDP user..."
          
          $pythonUrl = "https://www.python.org/ftp/python/3.11.0/python-3.11.0-amd64.exe"
          $pythonInstaller = "C:\Users\RDP\Downloads\python-installer.exe"
          
          Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller
          
          # Устанавливаем Python в профиль RDP пользователя
          $rdpPythonPath = "C:\Users\RDP\AppData\Local\Programs\Python\Python311"
          
          # Устанавливаем от имени системы, но в папку пользователя RDP
          $installArgs = @(
              "/quiet",
              "InstallAllUsers=0",
              "PrependPath=1",
              "Include_test=0",
              "TargetDir=$rdpPythonPath"
          )
          
          Start-Process $pythonInstaller -ArgumentList $installArgs -Wait -NoNewWindow
          Remove-Item $pythonInstaller -Force
          
          # Проверяем установку
          if (Test-Path "$rdpPythonPath\python.exe") {
              Write-Host "✓ Python installed at: $rdpPythonPath"
              
              # Устанавливаем права для RDP
              $acl = Get-Acl $rdpPythonPath
              $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
              $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
              $acl.SetAccessRule($accessRule)
              Set-Acl $rdpPythonPath $acl
          } else {
              Write-Error "Python installation failed"
              exit 1
          }

      - name: Install Python Libraries for RDP User
        run: |
          Write-Host "Installing Python libraries for RDP user..."
          
          $rdpPythonPath = "C:\Users\RDP\AppData\Local\Programs\Python\Python311"
          $pythonExe = "$rdpPythonPath\python.exe"
          $pipExe = "$rdpPythonPath\Scripts\pip.exe"
          
          if (Test-Path $pythonExe) {
              Write-Host "Upgrading pip..."
              & $pythonExe -m pip install --upgrade pip
              
              Write-Host "Installing libraries..."
              & $pipExe install numpy opencv-python pygetwindow pywin32
              
              Write-Host "✓ Python libraries installed for RDP user"
          } else {
              Write-Error "Python executable not found at: $pythonExe"
              exit 1
          }

      - name: Install AutoHotkey for RDP User
        run: |
          Write-Host "Installing AutoHotkey for RDP user..."
          
          $ahkInstaller = "C:\Users\RDP\Downloads\AutoHotkey_1.1.37.02_setup.exe"
          $rdpAhkPath = "C:\Users\RDP\AppData\Local\Programs\AutoHotkey"
          
          if (Test-Path $ahkInstaller) {
              # Создаём директорию для AutoHotkey
              if (-not (Test-Path $rdpAhkPath)) {
                  New-Item -ItemType Directory -Path $rdpAhkPath -Force | Out-Null
              }
              
              # Устанавливаем AutoHotkey в папку пользователя RDP
              Start-Process $ahkInstaller -ArgumentList "/S", "/D=$rdpAhkPath" -Wait -NoNewWindow
              
              Start-Sleep -Seconds 3
              
              if (Test-Path "$rdpAhkPath\AutoHotkey.exe") {
                  Write-Host "✓ AutoHotkey installed at: $rdpAhkPath"
                  
                  # Устанавливаем права для RDP
                  $acl = Get-Acl $rdpAhkPath
                  $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
                  $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
                  $acl.SetAccessRule($accessRule)
                  Set-Acl $rdpAhkPath $acl
                  
                  # Создаём ярлык на рабочем столе
                  $desktopPath = "C:\Users\RDP\Desktop"
                  $shortcutPath = "$desktopPath\AutoHotkey.lnk"
                  $WScriptShell = New-Object -ComObject WScript.Shell
                  $shortcut = $WScriptShell.CreateShortcut($shortcutPath)
                  $shortcut.TargetPath = "$rdpAhkPath\AutoHotkey.exe"
                  $shortcut.Save()
              } else {
                  Write-Error "AutoHotkey installation failed"
                  exit 1
              }
          } else {
              Write-Error "AutoHotkey installer not found"
              exit 1
          }

      - name: Download Roblox Player from GitHub Release
        run: |
          Write-Host "Downloading Roblox Player from GitHub Release..."
          
          $token = "${{ secrets.GH_PAT }}"
          $repo = "brainburn33/repo"
          $releaseTag = "ver"
          $fileName = "version-4aeb17bd13994560.zip"
          
          $rdpLocalAppData = "C:\Users\RDP\AppData\Local"
          $robloxZipPath = "C:\Users\RDP\Downloads\roblox-player.zip"
          
          try {
              Write-Host "Fetching release info..."
              $apiHeaders = @{
                  Authorization = "Bearer $token"
                  Accept = "application/vnd.github+json"
              }
              
              $releaseUrl = "https://api.github.com/repos/$repo/releases/tags/$releaseTag"
              $release = Invoke-RestMethod -Uri $releaseUrl -Headers $apiHeaders -Method Get
              
              $asset = $release.assets | Where-Object { $_.name -eq $fileName }
              
              if (-not $asset) {
                  Write-Error "Asset '$fileName' not found in release '$releaseTag'"
                  Write-Host "Available assets:"
                  $release.assets | ForEach-Object { Write-Host "  - $($_.name)" }
                  exit 1
              }
              
              Write-Host "Found asset: $($asset.name)"
              
              $downloadHeaders = @{
                  Authorization = "Bearer $token"
                  Accept = "application/octet-stream"
              }
              
              Invoke-WebRequest -Uri $asset.url -Headers $downloadHeaders -OutFile $robloxZipPath -UseBasicParsing
              
              if (Test-Path $robloxZipPath) {
                  $zipSize = (Get-Item $robloxZipPath).Length / 1MB
                  Write-Host "✓ Downloaded: $([math]::Round($zipSize, 2)) MB"
                  
                  # Создаём структуру для Roblox в профиле RDP
                  $robloxBasePath = "$rdpLocalAppData\Roblox"
                  $robloxVersionsPath = "$robloxBasePath\Versions"
                  
                  if (-not (Test-Path $robloxBasePath)) {
                      New-Item -ItemType Directory -Path $robloxBasePath -Force | Out-Null
                  }
                  
                  if (-not (Test-Path $robloxVersionsPath)) {
                      New-Item -ItemType Directory -Path $robloxVersionsPath -Force | Out-Null
                  }
                  
                  Write-Host "Extracting to: $robloxVersionsPath"
                  Expand-Archive -Path $robloxZipPath -DestinationPath $robloxVersionsPath -Force
                  Remove-Item $robloxZipPath -Force
                  
                  # Устанавливаем права для RDP на всю папку Roblox
                  Write-Host "Setting permissions for RDP user..."
                  $acl = Get-Acl $robloxBasePath
                  $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
                  $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
                  $acl.SetAccessRule($accessRule)
                  Set-Acl $robloxBasePath $acl
                  
                  Write-Host "✓ Permissions set for RDP user"
                  
                  # Ищем RobloxPlayerBeta.exe
                  $playerExe = Get-ChildItem -Path $robloxVersionsPath -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
                  
                  if ($playerExe) {
                      Write-Host "✓ Roblox Player found at: $($playerExe.FullName)"
                      
                      # Создаём ярлык на рабочем столе RDP
                      $rdpDesktop = "C:\Users\RDP\Desktop"
                      $shortcutPath = "$rdpDesktop\Roblox Player.lnk"
                      
                      $WScriptShell = New-Object -ComObject WScript.Shell
                      $shortcut = $WScriptShell.CreateShortcut($shortcutPath)
                      $shortcut.TargetPath = $playerExe.FullName
                      $shortcut.WorkingDirectory = $playerExe.DirectoryName
                      $shortcut.Save()
                      
                      Write-Host "✓ Desktop shortcut created"
                      Write-Host "`nRoblox Player installation complete:"
                      Write-Host "  User: RDP"
                      Write-Host "  Path: $robloxBasePath"
                      Write-Host "  Exe:  $($playerExe.FullName)"
                  } else {
                      Write-Host "⚠ RobloxPlayerBeta.exe not found"
                      Write-Host "Contents of $robloxVersionsPath :"
                      Get-ChildItem $robloxVersionsPath -Recurse | Select-Object -First 10 | ForEach-Object {
                          Write-Host "  - $($_.FullName)"
                      }
                  }
              } else {
                  Write-Error "Failed to download Roblox Player"
                  exit 1
              }
              
          } catch {
              Write-Error "Error: $($_.Exception.Message)"
              if ($_.Exception.Response) {
                  Write-Host "Status Code: $($_.Exception.Response.StatusCode.value__)"
              }
              exit 1
          }

      - name: Setup Roblox Data for RDP User
        run: |
          Write-Host "Setting up Roblox data for RDP user..."
          
          $rdpLocalAppData = "C:\Users\RDP\AppData\Local"
          $robloxPath = "$rdpLocalAppData\Roblox"
          $robloxZipPath = "C:\Users\RDP\Downloads\Roblox.zip"
          
          if (-not (Test-Path $robloxZipPath)) {
              Write-Error "Roblox.zip not found at: $robloxZipPath"
              exit 1
          }
          
          if (-not (Test-Path $robloxPath)) {
              New-Item -ItemType Directory -Path $robloxPath -Force | Out-Null
          }
          
          Write-Host "Extracting Roblox data to: $robloxPath"
          Expand-Archive -Path $robloxZipPath -DestinationPath $robloxPath -Force
          Remove-Item $robloxZipPath -Force
          
          # Устанавливаем права для RDP рекурсивно
          Write-Host "Setting permissions recursively..."
          Get-ChildItem -Path $robloxPath -Recurse | ForEach-Object {
              $acl = Get-Acl $_.FullName
              $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
              $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
              $acl.SetAccessRule($accessRule)
              Set-Acl $_.FullName $acl
          }
          
          Write-Host "✓ Roblox data extracted and permissions set for RDP user!"

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed successfully!"

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Connecting to Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected! IP: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Verifying RDP accessibility..."
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "✓ TCP connectivity successful!"

      - name: Create Startup Scripts for RDP User
        run: |
          Write-Host "Creating startup scripts for RDP user..."
          
          $rdpStartupPath = "C:\Users\RDP\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
          if (-not (Test-Path $rdpStartupPath)) {
              New-Item -ItemType Directory -Path $rdpStartupPath -Force | Out-Null
          }
          
          # Python startup script
          $pythonStartupBat = "$rdpStartupPath\start_python.bat"
          $batContent = @"
@echo off
cd /d C:\Users\RDP\Downloads
start /min "C:\Users\RDP\AppData\Local\Programs\Python\Python311\python.exe" kickedcheckv2.py
"@
          Set-Content -Path $pythonStartupBat -Value $batContent
          Write-Host "✓ Python startup script created"
          
          # AHK startup script
          $ahkStartupBat = "$rdpStartupPath\start_ahk.bat"
          $batContent = @"
@echo off
timeout /t 5 /nobreak
start "" "C:\Users\RDP\AppData\Local\Programs\AutoHotkey\AutoHotkey.exe" "C:\Users\RDP\Downloads\connect.ahk"
"@
          Set-Content -Path $ahkStartupBat -Value $batContent
          Write-Host "✓ AHK startup script created"
          
          # Устанавливаем права на Startup
          $acl = Get-Acl $rdpStartupPath
          $permission = "RDP","FullControl","ContainerInherit,ObjectInherit","None","Allow"
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
          $acl.SetAccessRule($accessRule)
          Set-Acl $rdpStartupPath $acl
          
          Write-Host "✓ Startup scripts configured for RDP user"

      - name: Create Environment Variables for RDP User
        run: |
          Write-Host "Setting environment variables for RDP user..."
          
          # Получаем пароль RDP пользователя
          $password = Get-Content "$env:TEMP\rdp_password.txt"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ("RDP", $securePassword)
          
          # Создаём скрипт для установки переменных окружения
          $envScriptPath = "C:\Users\RDP\set_env.ps1"
          $envScript = @"
# Добавляем Python в PATH
`$env:Path = "C:\Users\RDP\AppData\Local\Programs\Python\Python311;C:\Users\RDP\AppData\Local\Programs\Python\Python311\Scripts;" + `$env:Path
[Environment]::SetEnvironmentVariable("Path", `$env:Path, "User")

# Добавляем AutoHotkey в PATH
`$env:Path = "C:\Users\RDP\AppData\Local\Programs\AutoHotkey;" + `$env:Path
[Environment]::SetEnvironmentVariable("Path", `$env:Path, "User")

Write-Host "Environment variables set for RDP user"
"@
          Set-Content -Path $envScriptPath -Value $envScript
          
          # Выполняем скрипт от имени RDP пользователя
          try {
              Start-Process powershell -Credential $credential -ArgumentList "-NoProfile", "-ExecutionPolicy Bypass", "-File", "$envScriptPath" -Wait -WindowStyle Hidden
              Write-Host "✓ Environment variables set for RDP user"
          } catch {
              Write-Host "⚠ Could not set environment variables as RDP user (will be set on first login)"
          }
          
          Remove-Item $envScriptPath -Force

      - name: Start Scripts as RDP User
        run: |
          Write-Host "Starting scripts as RDP user..."
          
          $password = Get-Content "$env:TEMP\rdp_password.txt"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ("RDP", $securePassword)
          
          # Запускаем Python скрипт
          $pythonScriptPath = "C:\Users\RDP\Downloads\kickedcheckv2.py"
          if (Test-Path $pythonScriptPath) {
              Write-Host "Starting Python script as RDP user..."
              
              $pythonCmd = "C:\Users\RDP\AppData\Local\Programs\Python\Python311\python.exe"
              
              try {
                  Start-Process powershell -Credential $credential -ArgumentList "-NoProfile", "-ExecutionPolicy Bypass", "-Command", "& { Set-Location 'C:\Users\RDP\Downloads'; Start-Process '$pythonCmd' -ArgumentList '$pythonScriptPath' -WindowStyle Hidden }" -WindowStyle Hidden
                  Write-Host "✓ Python script started"
              } catch {
                  Write-Host "⚠ Could not start Python script (will auto-start on RDP login)"
              }
          }
          
          # Запускаем AHK скрипт
          Start-Sleep -Seconds 3
          $ahkScriptPath = "C:\Users\RDP\Downloads\connect.ahk"
          if (Test-Path $ahkScriptPath) {
              Write-Host "Starting AHK script as RDP user..."
              
              $ahkCmd = "C:\Users\RDP\AppData\Local\Programs\AutoHotkey\AutoHotkey.exe"
              
              try {
                  Start-Process powershell -Credential $credential -ArgumentList "-NoProfile", "-ExecutionPolicy Bypass", "-Command", "& { Start-Process '$ahkCmd' -ArgumentList '$ahkScriptPath' -WindowStyle Hidden }" -WindowStyle Hidden
                  Write-Host "✓ AHK script started"
              } catch {
                  Write-Host "⚠ Could not start AHK script (will auto-start on RDP login)"
              }
          }
          
          Start-Sleep -Seconds 5
          Write-Host "Scripts configured for RDP user"

      - name: Display Installation Summary
        run: |
          Write-Host "`n=========================================="
          Write-Host "    INSTALLATION SUMMARY (RDP USER)"
          Write-Host "=========================================="
          Write-Host ""
          Write-Host "Python:"
          Write-Host "  Path: C:\Users\RDP\AppData\Local\Programs\Python\Python311"
          if (Test-Path "C:\Users\RDP\AppData\Local\Programs\Python\Python311\python.exe") {
              Write-Host "  Status: ✓ Installed"
          } else {
              Write-Host "  Status: ✗ NOT FOUND"
          }
          
          Write-Host ""
          Write-Host "AutoHotkey:"
          Write-Host "  Path: C:\Users\RDP\AppData\Local\Programs\AutoHotkey"
          if (Test-Path "C:\Users\RDP\AppData\Local\Programs\AutoHotkey\AutoHotkey.exe") {
              Write-Host "  Status: ✓ Installed"
          } else {
              Write-Host "  Status: ✗ NOT FOUND"
          }
          
          Write-Host ""
          Write-Host "Roblox Player:"
          Write-Host "  Path: C:\Users\RDP\AppData\Local\Roblox"
          $robloxExe = Get-ChildItem "C:\Users\RDP\AppData\Local\Roblox" -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($robloxExe) {
              Write-Host "  Status: ✓ Installed"
              Write-Host "  Exe: $($robloxExe.FullName)"
          } else {
              Write-Host "  Status: ✗ NOT FOUND"
          }
          
          Write-Host ""
          Write-Host "Scripts:"
          Write-Host "  Python: C:\Users\RDP\Downloads\kickedcheckv2.py"
          if (Test-Path "C:\Users\RDP\Downloads\kickedcheckv2.py") {
              Write-Host "    Status: ✓ Present"
          }
          Write-Host "  AHK: C:\Users\RDP\Downloads\connect.ahk"
          if (Test-Path "C:\Users\RDP\Downloads\connect.ahk") {
              Write-Host "    Status: ✓ Present"
          }
          
          Write-Host ""
          Write-Host "Startup Scripts:"
          Write-Host "  Location: C:\Users\RDP\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
          if (Test-Path "C:\Users\RDP\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\start_python.bat") {
              Write-Host "    Python: ✓ Configured"
          }
          if (Test-Path "C:\Users\RDP\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\start_ahk.bat") {
              Write-Host "    AHK: ✓ Configured"
          }
          
          Write-Host ""
          Write-Host "=========================================="
          Write-Host ""

      - name: Maintain Connection
        run: |
          Write-Host "`n================================================"
          Write-Host "           RDP ACCESS INFORMATION"
          Write-Host "================================================"
          Write-Host "Address:  $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "================================================"
          Write-Host "User Profile: C:\Users\RDP"
          Write-Host "================================================"
          Write-Host ""
          Write-Host "INSTALLED FOR RDP USER:"
          Write-Host "  • Python:  C:\Users\RDP\AppData\Local\Programs\Python\Python311"
          Write-Host "  • AHK:     C:\Users\RDP\AppData\Local\Programs\AutoHotkey"
          Write-Host "  • Roblox:  C:\Users\RDP\AppData\Local\Roblox"
          Write-Host "  • Scripts: C:\Users\RDP\Downloads"
          Write-Host ""
          Write-Host "AUTO-START ON LOGIN:"
          Write-Host "  • kickedcheckv2.py (Python script)"
          Write-Host "  • connect.ahk (AutoHotkey script)"
          Write-Host ""
          Write-Host "================================================"
          Write-Host "Session will remain active until manually cancelled."
          Write-Host "All applications will auto-start when you login via RDP."
          Write-Host "================================================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP session active for user: RDP"
              
              # Проверяем процессы Python
              $pythonProcess = Get-Process python -ErrorAction SilentlyContinue
              if ($pythonProcess) {
                  $pythonCount = ($pythonProcess | Measure-Object).Count
                  Write-Host "  ✓ Python processes running: $pythonCount"
              }
              
              # Проверяем процессы AutoHotkey
              $ahkProcess = Get-Process AutoHotkey -ErrorAction SilentlyContinue
              if ($ahkProcess) {
                  $ahkCount = ($ahkProcess | Measure-Object).Count
                  Write-Host "  ✓ AutoHotkey processes running: $ahkCount"
              }
              
              # Проверяем процессы Roblox
              $robloxProcess = Get-Process RobloxPlayerBeta -ErrorAction SilentlyContinue
              if ($robloxProcess) {
                  Write-Host "  ✓ Roblox Player is running"
              }
              
              # Проверяем пользователя RDP
              $rdpUser = Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue
              if ($rdpUser) {
                  Write-Host "  ✓ RDP user account active"
              }
              
              # Проверяем Tailscale подключение
              $tsStatus = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json
              if ($tsStatus) {
                  Write-Host "  ✓ Tailscale connected"
              }
              
              # Проверяем существование ключевых файлов
              $pythonExe = "C:\Users\RDP\AppData\Local\Programs\Python\Python311\python.exe"
              $ahkExe = "C:\Users\RDP\AppData\Local\Programs\AutoHotkey\AutoHotkey.exe"
              $robloxExe = Get-ChildItem "C:\Users\RDP\AppData\Local\Roblox" -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              
              $allFilesPresent = $true
              if (-not (Test-Path $pythonExe)) {
                  Write-Host "  ⚠ Python executable missing!"
                  $allFilesPresent = $false
              }
              if (-not (Test-Path $ahkExe)) {
                  Write-Host "  ⚠ AutoHotkey executable missing!"
                  $allFilesPresent = $false
              }
              if (-not $robloxExe) {
                  Write-Host "  ⚠ Roblox Player executable missing!"
                  $allFilesPresent = $false
              }
              
              if ($allFilesPresent) {
                  Write-Host "  ✓ All installations verified in RDP user profile"
              }
              
              Write-Host ""
              Start-Sleep -Seconds 300
          }
