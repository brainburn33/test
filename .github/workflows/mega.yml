name: Upload to MEGA (Python)

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install mega.py library
        shell: powershell
        run: |
          Write-Host "Installing mega.py..."
          pip install mega.py
          Write-Host "Installation complete!"

      - name: Create test file
        shell: powershell
        run: |
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $content = "GitHub Actions test file created at $timestamp`nRun number: ${{ github.run_number }}"
          Set-Content -Path "test-upload.txt" -Value $content
          Write-Host "Test file created with timestamp: $timestamp"

      - name: Upload to MEGA
        shell: powershell
        run: |
          $pythonScript = @'
          from mega import Mega
          import sys
          
          email = sys.argv[1]
          password = sys.argv[2]
          filename = sys.argv[3]
          
          try:
              print("Connecting to MEGA...")
              mega = Mega()
              
              print(f"Logging in as {email}...")
              m = mega.login(email, password)
              
              print("Login successful!")
              
              # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
              print("Creating/finding folder...")
              try:
                  folder = m.find('GitHub-Actions')
                  if not folder:
                      folder = m.create_folder('GitHub-Actions')
                      print("Folder created!")
                  else:
                      folder = folder[0]
                      print("Folder found!")
              except:
                  folder = m.create_folder('GitHub-Actions')
                  print("Folder created!")
              
              # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
              print(f"Uploading {filename}...")
              uploaded_file = m.upload(filename, folder)
              
              print(f"‚úÖ File uploaded successfully!")
              print(f"File ID: {uploaded_file}")
              
              # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
              print("\nFiles in GitHub-Actions folder:")
              files = m.get_files_in_node(folder)
              for file_id, file_data in files.items():
                  if file_data['t'] == 0:  # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–Ω–µ –ø–∞–ø–∫–∏)
                      print(f"  - {file_data['a']['n']}")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              sys.exit(1)
          '@
          
          Set-Content -Path "upload_mega.py" -Value $pythonScript
          
          Write-Host "Running upload script..."
          python upload_mega.py "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}" "test-upload.txt"

      - name: Download file back (verification)
        shell: powershell
        run: |
          $pythonScript = @'
          from mega import Mega
          import sys
          
          email = sys.argv[1]
          password = sys.argv[2]
          
          try:
              print("Logging in to MEGA...")
              mega = Mega()
              m = mega.login(email, password)
              
              print("Finding folder...")
              folder = m.find('GitHub-Actions')
              
              if folder:
                  folder_node = folder[0]
                  files = m.get_files_in_node(folder_node)
                  
                  print(f"\nFound {len(files)} items in GitHub-Actions folder:")
                  for file_id, file_data in files.items():
                      if file_data['t'] == 0:
                          filename = file_data['a']['n']
                          print(f"  üìÑ {filename}")
                          
                          # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                          print(f"\nDownloading {filename} for verification...")
                          m.download_url(file_id, dest_filename=f"downloaded_{filename}")
                          print(f"‚úÖ Downloaded successfully!")
                          
                          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                          with open(f"downloaded_{filename}", 'r') as f:
                              content = f.read()
                              print(f"\nüìù File content:\n{content}")
                          break
              else:
                  print("Folder not found!")
                  
          except Exception as e:
              print(f"Error: {e}")
          '@
          
          Set-Content -Path "download_mega.py" -Value $pythonScript
          python download_mega.py "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}"

      - name: Wait before restart
        shell: powershell
        run: |
          Write-Host "Waiting 30 seconds before restart..."
          Start-Sleep -Seconds 30

      - name: Restart Workflow
        shell: powershell
        run: |
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $workflowFile = "mega.yml"
          $apiUrl = "https://api.github.com/repos/$repo/actions/workflows/$workflowFile/dispatches"
          
          Write-Host "Restarting workflow..."
          $body = '{"ref": "main"}'
          
          try {
            Invoke-RestMethod -Uri $apiUrl -Method Post -Headers @{
              Authorization = "token $token"
              Accept = "application/vnd.github+json"
            } -Body $body
            Write-Host "‚úÖ Workflow restarted successfully!"
          } catch {
            Write-Host "‚ö†Ô∏è Error restarting: $_"
          }
