name: GitHub-RDP Auto-Restart with Artifacts

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  rdp-test:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get artifacts from previous workflow runs
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "Looking for artifacts from previous runs..."
          
          # Получаем список предыдущих запусков
          $repo = "${{ github.repository }}"
          $workflow_id = "${{ github.workflow }}"
          
          # Используем gh CLI для получения артефактов
          $artifacts = gh api "repos/$repo/actions/artifacts" --jq '.artifacts[] | select(.name=="persistent-data") | select(.expired==false)' | ConvertFrom-Json
          
          if ($artifacts) {
            $latestArtifact = $artifacts | Select-Object -First 1
            Write-Host "Found artifact: $($latestArtifact.name) from run $($latestArtifact.workflow_run.id)"
            
            # Скачиваем артефакт
            New-Item -ItemType Directory -Force -Path ./previous-data
            gh api "repos/$repo/actions/artifacts/$($latestArtifact.id)/zip" > artifact.zip
            Expand-Archive -Path artifact.zip -DestinationPath ./previous-data -Force
            Remove-Item artifact.zip
            
            Write-Host "Downloaded previous data:"
            Get-ChildItem ./previous-data -Recurse
          } else {
            Write-Host "No previous artifacts found (first run)"
          }

      - name: Create test data
        shell: powershell
        run: |
          # Создаем папку для данных
          New-Item -ItemType Directory -Force -Path ./data
          
          # Создаем тестовый файл с временной меткой
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $runNumber = "${{ github.run_number }}"
          $runId = "${{ github.run_id }}"
          
          $content = @"
          Run Number: $runNumber
          Run ID: $runId
          Timestamp: $timestamp
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          "@
          
          Set-Content -Path "./data/test-file.txt" -Value $content
          
          # Счетчик запусков
          $counter = 1
          if (Test-Path "./previous-data/counter.txt") {
            $counter = [int](Get-Content "./previous-data/counter.txt") + 1
          }
          Set-Content -Path "./data/counter.txt" -Value $counter
          
          # История запусков
          $historyEntry = "Run #$counter (ID: $runId) at $timestamp"
          
          if (Test-Path "./previous-data/history.txt") {
            $previousHistory = Get-Content "./previous-data/history.txt" -Raw
            Set-Content -Path "./data/history.txt" -Value "$previousHistory`n$historyEntry"
          } else {
            Set-Content -Path "./data/history.txt" -Value $historyEntry
          }
          
          Write-Host "This is run number: $counter"
          Write-Host "Created test data:"
          Get-ChildItem ./data

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: persistent-data
          path: ./data/
          retention-days: 7

      - name: Display data info
        shell: powershell
        run: |
          Write-Host "=== Current Session Data ==="
          if (Test-Path "./data/test-file.txt") {
            Get-Content "./data/test-file.txt"
          }
          
          Write-Host "`n=== Counter ==="
          if (Test-Path "./data/counter.txt") {
            $counter = Get-Content "./data/counter.txt"
            Write-Host "Run counter: $counter"
          }
          
          Write-Host "`n=== Full History ==="
          if (Test-Path "./data/history.txt") {
            Get-Content "./data/history.txt"
          }
          
          Write-Host "`n=== Files in data folder ==="
          Get-ChildItem ./data -Recurse | Format-Table Name, Length, LastWriteTime

      - name: Check if should restart
        id: check_restart
        shell: powershell
        run: |
          $maxRuns = 5  # Максимальное количество запусков
          $counter = 1
          
          if (Test-Path "./data/counter.txt") {
            $counter = [int](Get-Content "./data/counter.txt")
          }
          
          Write-Host "Current run: $counter of $maxRuns"
          
          if ($counter -lt $maxRuns) {
            Write-Host "Will restart workflow"
            echo "should_restart=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Reached maximum runs, will not restart"
            echo "should_restart=false" >> $env:GITHUB_OUTPUT
          }

      - name: Wait before restart
        if: steps.check_restart.outputs.should_restart == 'true'
        shell: powershell
        run: |
          Write-Host "⏳ Waiting 10 seconds before restart..."
          Start-Sleep -Seconds 10

      - name: Restart Workflow
        if: steps.check_restart.outputs.should_restart == 'true'
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "Triggering workflow restart..."
          
          # Используем gh CLI для запуска workflow
          gh workflow run "${{ github.workflow }}" --ref "${{ github.ref_name }}"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Workflow restart triggered successfully!"
          } else {
            Write-Host "❌ Failed to trigger restart"
          }
