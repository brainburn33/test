name: RDP with Custom Folders Persistence

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup cache key
        id: cache-key
        shell: powershell
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          echo "cache_key=rdp-extended-$date" >> $env:GITHUB_OUTPUT
          Write-Host "Cache key: rdp-extended-$date"

      - name: Restore cached data
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: ./cached-data
          key: ${{ steps.cache-key.outputs.cache_key }}
          restore-keys: |
            rdp-extended-

      - name: Restore user data from cache
        shell: powershell
        run: |
          $userProfile = "C:\Users\runneradmin"
          
          Write-Host "Restoring cached data..."
          
          if (Test-Path "./cached-data") {
            if (Test-Path "./cached-data/Desktop") {
              robocopy "./cached-data/Desktop" "$userProfile\Desktop" /E /R:1 /W:1 /NFL /NDL /NP
              Write-Host "✅ Desktop restored"
            }
            
            if (Test-Path "./cached-data/Documents") {
              robocopy "./cached-data/Documents" "$userProfile\Documents" /E /R:1 /W:1 /NFL /NDL /NP
              Write-Host "✅ Documents restored"
            }
            
            if (Test-Path "./cached-data/Downloads") {
              robocopy "./cached-data/Downloads" "$userProfile\Downloads" /E /R:1 /W:1 /NFL /NDL /NP
              Write-Host "✅ Downloads restored"
            }
            
            if (Test-Path "./cached-data/AppData/Local/Roblox") {
              New-Item -ItemType Directory -Force -Path "$userProfile\AppData\Local\Roblox" -ErrorAction SilentlyContinue
              robocopy "./cached-data/AppData/Local/Roblox" "$userProfile\AppData\Local\Roblox" /E /R:1 /W:1 /NFL /NDL /NP
              Write-Host "✅ AppData\Local\Roblox restored"
            }
            
            if (Test-Path "./cached-data/Bloxtrap") {
              robocopy "./cached-data/Bloxtrap" "C:\Bloxtrap" /E /R:1 /W:1 /NFL /NDL /NP
              Write-Host "✅ Restored C:\Bloxtrap"
            }
            
            if (Test-Path "./cached-data/session-counter.txt") {
              $counter = [int](Get-Content "./cached-data/session-counter.txt") + 1
            } else {
              $counter = 1
            }
            Set-Content -Path "$userProfile\Desktop\session-counter.txt" -Value $counter
            
            Write-Host "`n=== Session #$counter ==="
          } else {
            Write-Host "No cached data found - starting fresh (Session #1)"
            Set-Content -Path "$userProfile\Desktop\session-counter.txt" -Value "1"
          }

      - name: Setup persistent storage
        shell: powershell
        run: |
          $userProfile = "C:\Users\runneradmin"
          New-Item -ItemType Directory -Force -Path "C:\PersistentData"
          
          $readme = @"
==================================================
PERSISTENT STORAGE GUIDE
==================================================

SAVED AUTOMATICALLY:
- Desktop
- Documents
- Downloads
- AppData\Local\Roblox
- C:\Bloxtrap

Auto-save interval: 30 minutes
Session started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

==================================================
"@
          
          Set-Content -Path "C:\PersistentData\README.txt" -Value $readme
          
          $WshShell = New-Object -ComObject WScript.Shell
          
          $Shortcut = $WshShell.CreateShortcut("$userProfile\Desktop\Persistent Data.lnk")
          $Shortcut.TargetPath = "C:\PersistentData"
          $Shortcut.Save()
          
          $Shortcut2 = $WshShell.CreateShortcut("$userProfile\Desktop\AppData.lnk")
          $Shortcut2.TargetPath = "$userProfile\AppData"
          $Shortcut2.Save()
          
          $Shortcut3 = $WshShell.CreateShortcut("$userProfile\Desktop\Bloxtrap.lnk")
          $Shortcut3.TargetPath = "C:\Bloxtrap"
          $Shortcut3.Save()
          
          Write-Host "✅ Persistent storage configured"

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Static Password
        env:
          STATIC_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $password = $env:STATIC_PASSWORD
          
          if ([string]::IsNullOrEmpty($password)) {
              Write-Host "WARNING: RDP_PASSWORD secret not set, generating default"
              $password = "RDP_" + (-join ((65..90) + (97..122) + (48..57) | Get-Random -Count 10 | ForEach-Object {[char]$_}))
              Write-Host "Generated password: $password"
          }
          
          secedit /export /cfg C:\secpol.cfg | Out-Null
          (Get-Content C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          secedit /configure /db C:\windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY | Out-Null
          Remove-Item -Force C:\secpol.cfg -Confirm:$false
          
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          $userExists = Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue
          
          if ($userExists) {
              Set-LocalUser -Name "RDP" -Password $securePass
          } else {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }
          
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP port 3389 unreachable"
              exit 1
          }

      - name: Create connection info
        shell: powershell
        run: |
          $userProfile = "C:\Users\runneradmin"
          $counter = Get-Content "$userProfile\Desktop\session-counter.txt"
          
          $info = @"
==================================================
RDP CONNECTION - Session #$counter
==================================================

Address: $env:TAILSCALE_IP
Username: RDP
Password: $env:RDP_PASSWORD

Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

PERSISTENT FOLDERS (auto-saved every 30 min):
- Desktop
- Documents
- Downloads  
- AppData\Local\Roblox
- C:\Bloxtrap

==================================================
"@
          
          Set-Content -Path "$userProfile\Desktop\CONNECTION-INFO.txt" -Value $info
          Write-Host $info

      - name: Maintain Connection with Auto-Save
        run: |
          $userProfile = "C:\Users\runneradmin"
          $counter = Get-Content "$userProfile\Desktop\session-counter.txt"
          
          Write-Host "`n=== RDP SESSION #$counter ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "Auto-save: every 30 minutes"
          Write-Host "============================`n"
          
          $lastSave = Get-Date
          $saveInterval = 1
          
          while ($true) {
              $now = Get-Date
              $elapsed = ($now - $lastSave).TotalMinutes
              $remaining = [math]::Max(0, [math]::Round($saveInterval - $elapsed))
              
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Active | Next save: $remaining min"
              
              if ($elapsed -ge $saveInterval) {
                  Write-Host "`nStarting auto-save..."
                  
                  try {
                      # Очищаем старый кеш
                      if (Test-Path "./cached-data") {
                          Remove-Item -Path "./cached-data" -Recurse -Force -ErrorAction Stop
                      }
                      Start-Sleep -Seconds 2
                      
                      New-Item -ItemType Directory -Force -Path "./cached-data" | Out-Null
                      
                      # Desktop
                      if (Test-Path "$userProfile\Desktop") {
                          robocopy "$userProfile\Desktop" "./cached-data/Desktop" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
                          if ($LASTEXITCODE -lt 8) { Write-Host "  Desktop: OK" }
                      }
                      
                      # Documents
                      if (Test-Path "$userProfile\Documents") {
                          robocopy "$userProfile\Documents" "./cached-data/Documents" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
                          if ($LASTEXITCODE -lt 8) { Write-Host "  Documents: OK" }
                      }
                      
                      # Downloads
                      if (Test-Path "$userProfile\Downloads") {
                          robocopy "$userProfile\Downloads" "./cached-data/Downloads" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
                          if ($LASTEXITCODE -lt 8) { Write-Host "  Downloads: OK" }
                      }
                      
                      # Roblox
                      if (Test-Path "$userProfile\AppData\Local\Roblox") {
                          New-Item -ItemType Directory -Force -Path "./cached-data/AppData/Local" -ErrorAction SilentlyContinue | Out-Null
                          robocopy "$userProfile\AppData\Local\Roblox" "./cached-data/AppData/Local/Roblox" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
                          if ($LASTEXITCODE -lt 8) { Write-Host "  Roblox: OK" }
                      }
                      
                      # Bloxtrap
                      if (Test-Path "C:\Bloxtrap") {
                          robocopy "C:\Bloxtrap" "./cached-data/Bloxtrap" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
                          if ($LASTEXITCODE -lt 8) { Write-Host "  Bloxtrap: OK" }
                      }
                      
                      # Counter
                      Copy-Item "$userProfile\Desktop\session-counter.txt" -Destination "./cached-data/" -Force -ErrorAction SilentlyContinue
                      
                      Write-Host "Save completed: $(Get-Date -Format 'HH:mm:ss')`n"
                      
                  } catch {
                      Write-Host "Save error: $_`n"
                  }
                  
                  $lastSave = Get-Date
              }
              
              Start-Sleep -Seconds 60
          }

      - name: Final save
        if: always()
        shell: powershell
        run: |
          Write-Host "Final save..."
          
          $userProfile = "C:\Users\runneradmin"
          
          try {
              if (Test-Path "./cached-data") {
                  Remove-Item -Path "./cached-data" -Recurse -Force
              }
              Start-Sleep -Seconds 2
              
              New-Item -ItemType Directory -Force -Path "./cached-data" | Out-Null
              
              robocopy "$userProfile\Desktop" "./cached-data/Desktop" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
              robocopy "$userProfile\Documents" "./cached-data/Documents" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
              robocopy "$userProfile\Downloads" "./cached-data/Downloads" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
              
              if (Test-Path "$userProfile\AppData\Local\Roblox") {
                  New-Item -ItemType Directory -Force -Path "./cached-data/AppData/Local" | Out-Null
                  robocopy "$userProfile\AppData\Local\Roblox" "./cached-data/AppData/Local/Roblox" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
              }
              
              if (Test-Path "C:\Bloxtrap") {
                  robocopy "C:\Bloxtrap" "./cached-data/Bloxtrap" /E /R:1 /W:1 /NP /NFL /NDL 2>&1 | Out-Null
              }
              
              Copy-Item "$userProfile\Desktop\session-counter.txt" -Destination "./cached-data/" -Force -ErrorAction SilentlyContinue
              
              Write-Host "Final save completed"
              
          } catch {
              Write-Host "Final save error: $_"
          }
