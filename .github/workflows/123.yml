name: GitHub-RDP Auto-Restart with Artifacts

on:
  workflow_dispatch:

jobs:
  rdp-test:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test data
        shell: powershell
        run: |
          # Создаем папку для данных
          New-Item -ItemType Directory -Force -Path ./data
          
          # Создаем тестовый файл с временной меткой
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $runNumber = "${{ github.run_number }}"
          $content = @"
          Run Number: $runNumber
          Timestamp: $timestamp
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          "@
          
          Set-Content -Path "./data/test-file.txt" -Value $content
          
          # Создаем файл с историей запусков
          $historyFile = "./data/history.txt"
          if (Test-Path $historyFile) {
            Add-Content -Path $historyFile -Value "Run $runNumber at $timestamp"
          } else {
            Set-Content -Path $historyFile -Value "Run $runNumber at $timestamp"
          }
          
          Write-Host "Created test data:"
          Get-ChildItem ./data

      - name: Download previous artifact (if exists)
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: persistent-data
          path: ./previous-data

      - name: Merge with previous data
        shell: powershell
        run: |
          if (Test-Path "./previous-data") {
            Write-Host "Found previous data:"
            Get-ChildItem ./previous-data -Recurse
            
            # Копируем историю из предыдущего запуска
            if (Test-Path "./previous-data/history.txt") {
              $previousHistory = Get-Content "./previous-data/history.txt"
              $currentHistory = Get-Content "./data/history.txt"
              $mergedHistory = $previousHistory + $currentHistory
              Set-Content -Path "./data/history.txt" -Value $mergedHistory
              Write-Host "Merged history file"
            }
            
            # Копируем другие файлы если нужно
            Copy-Item ./previous-data/* ./data/ -Recurse -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "No previous data found, starting fresh"
          }
          
          Write-Host "Current data directory:"
          Get-ChildItem ./data -Recurse

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: persistent-data
          path: ./data/
          retention-days: 7  # Хранить артефакты 7 дней

      - name: Display data info
        shell: powershell
        run: |
          Write-Host "=== Current Session Data ==="
          Get-Content "./data/test-file.txt"
          
          Write-Host "`n=== History ==="
          if (Test-Path "./data/history.txt") {
            Get-Content "./data/history.txt"
          }
          
          Write-Host "`n=== Files in data folder ==="
          Get-ChildItem ./data -Recurse | Format-Table Name, Length, LastWriteTime

      - name: Wait before restart
        shell: powershell
        run: |
          Write-Host "Waiting 30 seconds before restart..."
          Start-Sleep -Seconds 30

      - name: Restart Workflow
        shell: powershell
        run: |
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $workflowFile = "${{ github.workflow_file_path }}"
          
          # Получаем имя файла workflow из пути
          $workflowFileName = Split-Path $workflowFile -Leaf
          
          $apiUrl = "https://api.github.com/repos/$repo/actions/workflows/$workflowFileName/dispatches"
          
          Write-Host "Attempting to restart workflow: $workflowFileName"
          
          $headers = @{
            "Authorization" = "Bearer $token"
            "Accept" = "application/vnd.github+json"
            "X-GitHub-Api-Version" = "2022-11-28"
          }
          
          $body = @{
            ref = "${{ github.ref_name }}"
          } | ConvertTo-Json
          
          try {
            Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body -ContentType "application/json"
            Write-Host "✅ Workflow restart request sent successfully"
          } catch {
            Write-Host "❌ Failed to restart workflow: $_"
            Write-Host "Status Code: $($_.Exception.Response.StatusCode.value__)"
            Write-Host "Error: $($_.ErrorDetails.Message)"
          }
