name: GitHub-RDP Auto-Restart with Artifacts

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  rdp-test:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test data
        shell: powershell
        run: |
          # Создаем папку для данных
          New-Item -ItemType Directory -Force -Path ./data
          
          # Создаем тестовый файл с временной меткой
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $runNumber = "${{ github.run_number }}"
          $runId = "${{ github.run_id }}"
          
          $content = @"
          Run Number: $runNumber
          Run ID: $runId
          Timestamp: $timestamp
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          "@
          
          Set-Content -Path "./data/test-file.txt" -Value $content
          
          # Создаем файл с историей запусков
          $historyEntry = "Run #$runNumber (ID: $runId) at $timestamp"
          Set-Content -Path "./data/current-run.txt" -Value $historyEntry
          
          Write-Host "Created test data:"
          Get-ChildItem ./data

      - name: Try to download previous artifact
        id: download
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: persistent-data
          path: ./previous-data
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

      - name: Check and merge with previous data
        shell: powershell
        run: |
          if (Test-Path "./previous-data") {
            Write-Host "✅ Found previous data:"
            Get-ChildItem ./previous-data -Recurse
            
            # Создаем или дополняем файл истории
            $historyFile = "./data/history.txt"
            
            if (Test-Path "./previous-data/history.txt") {
              $previousHistory = Get-Content "./previous-data/history.txt" -Raw
              Set-Content -Path $historyFile -Value $previousHistory
            }
            
            # Добавляем текущий запуск в историю
            if (Test-Path "./data/current-run.txt") {
              $currentRun = Get-Content "./data/current-run.txt"
              Add-Content -Path $historyFile -Value $currentRun
            }
            
            Write-Host "Merged history entries"
          } else {
            Write-Host "⚠️ No previous data found (this is normal for first run)"
            
            # Создаем начальную историю
            if (Test-Path "./data/current-run.txt") {
              $currentRun = Get-Content "./data/current-run.txt"
              Set-Content -Path "./data/history.txt" -Value $currentRun
            }
          }
          
          Write-Host "`nCurrent data directory:"
          Get-ChildItem ./data -Recurse

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: persistent-data
          path: ./data/
          retention-days: 7
          overwrite: true

      - name: Display data info
        shell: powershell
        run: |
          Write-Host "=== Current Session Data ==="
          if (Test-Path "./data/test-file.txt") {
            Get-Content "./data/test-file.txt"
          }
          
          Write-Host "`n=== Full History ==="
          if (Test-Path "./data/history.txt") {
            Get-Content "./data/history.txt"
          } else {
            Write-Host "No history yet"
          }
          
          Write-Host "`n=== Files in data folder ==="
          Get-ChildItem ./data -Recurse | Format-Table Name, Length, LastWriteTime

      - name: Wait before restart
        shell: powershell
        run: |
          Write-Host "⏳ Waiting 10 seconds before restart..."
          Start-Sleep -Seconds 10

      - name: Restart Workflow via GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          $repo = "${{ github.repository }}"
          $workflow_id = "${{ github.workflow }}"  # Используем имя workflow, не путь к файлу
          
          Write-Host "Repository: $repo"
          Write-Host "Workflow: $workflow_id"
          Write-Host "Current ref: ${{ github.ref_name }}"
          
          # Формируем URL для API
          $apiUrl = "https://api.github.com/repos/$repo/actions/workflows"
          
          # Сначала получаем ID workflow
          Write-Host "`nGetting workflow ID..."
          $headers = @{
            "Authorization" = "Bearer $env:GH_TOKEN"
            "Accept" = "application/vnd.github+json"
          }
          
          try {
            $workflows = Invoke-RestMethod -Uri $apiUrl -Method Get -Headers $headers
            $targetWorkflow = $workflows.workflows | Where-Object { $_.name -eq $workflow_id }
            
            if ($targetWorkflow) {
              $workflowId = $targetWorkflow.id
              Write-Host "Found workflow with ID: $workflowId"
              
              # Теперь запускаем workflow
              $dispatchUrl = "$apiUrl/$workflowId/dispatches"
              Write-Host "Dispatch URL: $dispatchUrl"
              
              $body = @{
                ref = "${{ github.ref_name }}"
              } | ConvertTo-Json
              
              Write-Host "`nSending restart request..."
              $response = Invoke-RestMethod -Uri $dispatchUrl -Method Post -Headers $headers -Body $body -ContentType "application/json"
              Write-Host "✅ Workflow restart request sent successfully!"
            } else {
              Write-Host "❌ Workflow not found"
            }
          } catch {
            Write-Host "❌ Failed to restart workflow"
            Write-Host "Error: $_"
            if ($_.Exception.Response) {
              Write-Host "Status: $($_.Exception.Response.StatusCode.value__)"
            }
          }
